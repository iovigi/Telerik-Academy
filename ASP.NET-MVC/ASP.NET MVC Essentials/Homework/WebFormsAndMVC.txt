ASP.NET Web Forms uses Page controller pattern approach for rendering layout. In this approach, every page has it’s own controller i.e. code-behind file that processes the request.
ASP.NET MVC uses Front Controller approach. That approach means ,a common controller for all pages, processes the requests.
ASP.NET Web Forms has no separation of concerns.Every page is coupled tight. Because of this coupled behavior, automated testing is really difficult.
ASP.NET MVC has very clean separation of concerns. View and Controller are neatly separate. Testability is key feature in ASP.NET MVC. 
ASP.NET Web Forms is stateful. Statefulness has a lots of problem for web environment in case of excessively large viewstate. Large viewstate means increase in page size.
ASP.NET MVC is stateless. As controller and view are not dependent and also no viewstate concept in ASP.NET MVC, so output is very clean.
ASP.NET WebForms model follows a Page Life cycle.
No Page Life cycle like WebForms. Request cycle is simple in ASP.NET MVC model.
Along with statefulness, microsoft tries to introduce server-side controls as in Windows applications. Purpose was to provide  somehow an abstraction to the details of HTML. In ASP.NET Web Forms, minimal knowledge of HTML, JavaScript and CSS is required. Above abstraction was good but provides limited control over HTML, JavaScript and CSS which is necessary in many cases. With a lots of control libraries availability and limited knowledge of other related technologies, ASP.NET WebForms is RAD(Rapid Application Development) approach.
In MVC, detailed knowledge of HTML, JavaScript and CSS is required. Full control over HTML, JavaScript and CSS. It’s a step back. For developers decrease in productivity.
ASP.NET Web Forms’s good for small scale applications with limited team size.
MVC’s better as well as recommended approach for large-scale applications where different teams are working together.  


